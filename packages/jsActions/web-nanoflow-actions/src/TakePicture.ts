// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.

// BEGIN EXTRA CODE
// END EXTRA CODE

/**
 * Take a picture using the device camera.
 * @returns {Promise.<boolean>}
 */
export async function TakePicture(picture: mendix.lib.MxObject): Promise<boolean> {
    // BEGIN USER CODE
    const getUserText = prepareLanguage();

    if (!picture) {
        return Promise.reject(
            new Error(
                getUserText("Input parameter 'Picture' is required.", "Invoerparameter 'Afbeelding' is vereist. ")
            )
        );
    }

    if (!picture.inheritsFrom("System.Image")) {
        const entity = picture.getEntity();

        return Promise.reject(
            new Error(
                getUserText(
                    `Entity ${entity} does not inherit from 'System.Image'.`,
                    `Entiteit ${entity} erft niet van 'System.Image'. `
                )
            )
        );
    }

    if (!("mediaDevices" in navigator) || !("getUserMedia" in navigator.mediaDevices)) {
        return Promise.reject(
            new Error(getUserText("Media devices are not supported.", "Media-apparaten worden niet ondersteund."))
        );
    }

    const videoDevices = (await navigator.mediaDevices.enumerateDevices()).filter(
        deviceInfo => deviceInfo.kind === "videoinput"
    );

    if (!videoDevices.length) {
        return Promise.reject(
            new Error(getUserText("Your device does not have a camera.", "Uw apparaat heeft geen camera."))
        );
    }

    // TODO: WC-463 rollup has a bug where comments are removed from the top of files, disallowing imports between "extra code" comments. Until this is fixed, SVGs are manually encoded and added here.
    const closeSVG =
        "PHN2ZyB3aWR0aD0iMzIiIGhlaWdodD0iMzIiIHZpZXdCb3g9IjAgMCAzMiAzMiIgZmlsbD0ibm9uZSIgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIj4KPHBhdGggZmlsbC1ydWxlPSJldmVub2RkIiBjbGlwLXJ1bGU9ImV2ZW5vZGQiIGQ9Ik0xOC4yMjIyIDE2LjAwMDNMMjYuNTM5NyA3LjY4MjhDMjcuMTU0MSA3LjA2ODM4IDI3LjE1NDEgNi4wNzUyNCAyNi41Mzk3IDUuNDYwODJDMjUuOTI1MyA0Ljg0NjM5IDI0LjkzMjEgNC44NDYzOSAyNC4zMTc3IDUuNDYwODJMMTYuMDAwMiAxMy43NzgzTDcuNjgyNzkgNS40NjA4MkM3LjA2ODM3IDQuODQ2MzkgNi4wNzUyNCA0Ljg0NjM5IDUuNDYwODIgNS40NjA4MkM0Ljg0NjM5IDYuMDc1MjQgNC44NDYzOSA3LjA2ODM4IDUuNDYwODIgNy42ODI4TDEzLjc3ODMgMTYuMDAwM0w1LjQ2MDgyIDI0LjMxNzhDNC44NDYzOSAyNC45MzIzIDQuODQ2MzkgMjUuOTI1NCA1LjQ2MDgyIDI2LjUzOThDNS43NjcyNCAyNi44NDYzIDYuMTY5NTIgMjcuMDAwMyA2LjU3MTggMjcuMDAwM0M2Ljk3NDA4IDI3LjAwMDMgNy4zNzYzNiAyNi44NDYzIDcuNjgyNzkgMjYuNTM5OEwxNi4wMDAyIDE4LjIyMjNMMjQuMzE3NyAyNi41Mzk4QzI0LjYyNDEgMjYuODQ2MyAyNS4wMjY0IDI3LjAwMDMgMjUuNDI4NyAyNy4wMDAzQzI1LjgzMSAyNy4wMDAzIDI2LjIzMzMgMjYuODQ2MyAyNi41Mzk3IDI2LjUzOThDMjcuMTU0MSAyNS45MjU0IDI3LjE1NDEgMjQuOTMyMyAyNi41Mzk3IDI0LjMxNzhMMTguMjIyMiAxNi4wMDAzWiIgZmlsbD0id2hpdGUiLz4KPC9zdmc+Cg==";
    const syncSVG =
        "PHN2ZyB3aWR0aD0iMzIiIGhlaWdodD0iMzIiIHZpZXdCb3g9IjAgMCAzMiAzMiIgZmlsbD0ibm9uZSIgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIj4KPHBhdGggZmlsbC1ydWxlPSJldmVub2RkIiBjbGlwLXJ1bGU9ImV2ZW5vZGQiIGQ9Ik0xNS45OTk5IDVDMTIuNzA5MyA1IDkuNzU0NzQgNi40NDQ1NCA3LjczNzY2IDguNzM3NjJMMTAuMTQ2NCAxMS4xNDY0QzEwLjQ2MTQgMTEuNDYxNCAxMC4yMzgzIDEyIDkuNzkyOSAxMkgyLjVDMi4yMjM4NiAxMiAyIDExLjc3NjEgMiAxMS41VjQuMjA3MDZDMiAzLjc2MTYgMi41Mzg1OCAzLjUzODUyIDIuODUzNTYgMy44NTM1TDUuNjEzMiA2LjYxMzE2QzguMTczOTIgMy43ODE1IDExLjg3ODIgMiAxNS45OTk5IDJDMjMuMTY0NCAyIDI5LjA3MDIgNy4zODA0MiAyOS45MDAyIDE0LjMyMTlDMjkuOTk4NiAxNS4xNDQ0IDI5LjQxMTYgMTUuODkxIDI4LjU4OSAxNS45ODk0QzI3Ljc2NjQgMTYuMDg3OCAyNy4wMTk4IDE1LjUwMDcgMjYuOTIxNCAxNC42NzgxQzI2LjI2OTYgOS4yMjY5IDIxLjYyNzIgNSAxNS45OTk5IDVaTTMuNDEwOSAxNi4wMTA2QzQuMjMzNDYgMTUuOTEyMiA0Ljk4MDAyIDE2LjQ5OTMgNS4wNzg0IDE3LjMyMTlDNS43MzAzMiAyMi43NzMgMTAuMzcyNiAyNyAxNS45OTk5IDI3QzE5LjI5MDYgMjcgMjIuMjQ1MiAyNS41NTU0IDI0LjI2MjIgMjMuMjYyNEwyMS44NTM2IDIwLjg1MzZDMjEuNTM4NiAyMC41Mzg2IDIxLjc2MTYgMjAgMjIuMjA3MiAyMEgyOS41QzI5Ljc3NjIgMjAgMzAgMjAuMjI0IDMwIDIwLjVWMjcuNzkzQzMwIDI4LjIzODQgMjkuNDYxNCAyOC40NjE0IDI5LjE0NjQgMjguMTQ2NEwyNi4zODY4IDI1LjM4NjhDMjMuODI2IDI4LjIxODQgMjAuMTIxNiAzMCAxNS45OTk5IDMwQzguODM1NDIgMzAgMi45Mjk3OCAyNC42MTk2IDIuMDk5NjIgMTcuNjc4MUMyLjAwMTI2IDE2Ljg1NTYgMi41ODgzNCAxNi4xMDkgMy40MTA5IDE2LjAxMDZaIiBmaWxsPSJ3aGl0ZSIvPgo8L3N2Zz4K";
    const cameraButtonSVG =
        "PHN2ZyB3aWR0aD0iNzAiIGhlaWdodD0iNzAiIHZpZXdCb3g9IjAgMCA3MCA3MCIgZmlsbD0ibm9uZSIgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIj4KPGNpcmNsZSBjeD0iMzUiIGN5PSIzNSIgcj0iMzUiIGZpbGw9IndoaXRlIi8+CjxjaXJjbGUgY3g9IjM1IiBjeT0iMzUiIHI9IjI4IiBmaWxsPSJ3aGl0ZSIgc3Ryb2tlPSJibGFjayIgc3Ryb2tlLXdpZHRoPSIyIi8+Cjwvc3ZnPgo=";

    return new Promise(async (resolve, reject) => {
        const hasMultipleCameraDevices = videoDevices.length > 1;
        let error: string | undefined;
        let stream: MediaStream | undefined;
        let styleElements: HTMLStyleElement[] = [];
        let videoIsReady = false;
        let saveButtonIsDisabled = false;
        let shouldFaceEnvironment = true;

        for (const styleElement of createStyleElements(createStyles())) {
            styleElements.push(styleElement);

            document.head.appendChild(styleElement);
        }

        const {
            video,
            wrapper,
            actionControl,
            switchControl,
            closeControl,
            createAction,
            controlsWrapper,
            createActionAndSwitch
        } = createFirstScreenElements();

        document.body.appendChild(wrapper);

        await startCamera("environment");

        const { handler: takePictureHandler, cleanup: secondScreenCleanup } = prepareSecondScreen();

        if (hasMultipleCameraDevices) {
            controlsWrapper.classList.add("pwa-take-picture-action-switch-control-wrapper");
            createActionAndSwitch();
        } else {
            controlsWrapper.classList.add("pwa-take-picture-action-control-wrapper");
            createAction();
        }

        closeControl.addEventListener("click", () => {
            closeControlHandler();

            secondScreenCleanup();

            resolve(false);
        });

        switchControl.addEventListener("click", switchControlHandler);

        actionControl.addEventListener("click", takePictureHandler);

        video.addEventListener("loadedmetadata", () => (videoIsReady = true));

        function createStyles(): string[] {
            return [
                `
                .pwa-take-picture-wrapper {
                    height: 100%;
                    width: 100%;
                    position: absolute;
                    top: 0;
                    right: 0;
                    bottom: 0;
                    left: 0;
                    display: flex;
                    flex-direction: column-reverse;
                    justify-content: space-between;
                    /* Should be higher than the the video. */
                    z-index: 111;
                };
                `,
                `
                .pwa-take-picture-video-element {
                    position: absolute;
                    /* Should be higher than the z-index of '.layout-atlas .region-sidebar' so it sits on top of the page. */
                    z-index: 110;
                    top: 0;
                    left: 0;
                    right: 0;
                    bottom: 0;
                    object-fit: cover;
                    width: 100%;
                    height: 100%;
                    background-color: black;
                };
                `,
                `
                .pwa-take-picture-action-control-wrapper {
                    display: flex;
                    justify-content: center;
                    flex-direction: row;
                    align-items: center;
                    /* should be higher than the video. */
                    z-index: 111;
                    margin-bottom: 74px;
                };
                `,
                `
                .pwa-take-picture-action-switch-control-wrapper {
                    display: flex;
                    justify-content: space-between;
                    flex-direction: row;
                    align-items: center;
                    /* should be higher than the video. */
                    z-index: 111;
                    margin-bottom: 74px;
                };
                `,
                `
                .pwa-take-picture-close-control-wrapper {
                    display: flex;
                    justify-content: flex-start;
                    flex-direction: column;
                    align-items: flex-start;
                    /* should be higher than the video. */
                    z-index: 111;
                };
                `,
                `
                .pwa-take-picture-action-control {
                    background-color: transparent;
                    border-style: none;
                    padding: 0;
                };
                `,
                `
                .pwa-take-picture-screen-reader {
                    border: 0;
                    clip: rect(0 0 0 0);
                    height: 1px;
                    margin: -1px;
                    overflow: hidden;
                    padding: 0;
                    position: absolute;
                    white-space: nowrap;
                    width: 1px;
                };
                `,
                `
                .pwa-take-picture-action-spacing {
                    flex: 1;
                    display: flex;
                    justify-content: center;
                    align-items: center;
                };
                `,
                `
                .pwa-take-picture-switch-spacing {
                    display: flex;
                    flex: 1;
                    justify-content: flex-end;
                    align-items: center;
                };
                `,
                `
                .pwa-take-picture-spacing-div {
                    flex: 1;
                };
                `,
                `
                .pwa-take-picture-action-control-inner {
                    border-radius: 50%;
                    background-color: white;
                    border: 1px solid black;
                    width: 58px;
                    height: 58px;
                };
                `,
                `
                .pwa-take-picture-button-wrapper {
                    padding: 16px;
                };
                `,
                `
                .pwa-take-picture-save-button {
                    color: white;
                    background-color: #264AE5;
                    width: 100%;
                    border-radius: 4px;
                    height: 40px;
                    font-size: 14px;
                    line-height: 20px;
                    text-align: center;
                    border-style: none;
                };
                `,
                `
                .pwa-take-picture-save-button.pwa-take-picture-disabled {
                    background-color: #888888bd;
                };
                `,
                `
                .pwa-take-picture-cancel-button {
                    margin-top: 8px;
                    color: #264AE5;
                    background-color: white;
                    width: 100%;
                    border-radius: 4px;
                    height: 40px;
                    font-size: 14px;
                    line-height: 20px;
                    text-align: center;
                    border: 1px solid #264AE5;
                };
                `,

                `
                .pwa-take-picture-switch-control {
                    background-color: transparent;
                    border-style: none;
                    padding: 0;
                    margin-right: 22.33px;
                };
                `,
                `
                .pwa-take-picture-close-control {
                    margin: 30px 0 0 30px;
                    border-style: none;
                    padding: 0;
                    background-color: transparent;
                };
                `,
                `
                .pwa-take-picture-confirm-wrapper {
                    position: absolute;
                    top: 0;
                    right: 0;
                    bottom: 0;
                    left: 0;
                    width: 100%;
                    height: 100%;
                    background-color: white;
                    /* should be higher than the wrapper. */
                    z-index: 112;
                    display: flex;
                    flex-direction: column;
                    justify-content: space-between;
                }
                `,
                `
                .pwa-take-picture-image {
                    width: 100%;
                }
                `,
                `
                /* Overwrite 'atlas_core/web/core/_legacy/_mxui.scss' for this particular widget because otherwise
                 iOS Safari will in certain cases put the top and/or bottom bar on top of the overlay of this widget. */
                 
                .mx-scrollcontainer-wrapper:not(.mx-scrollcontainer-nested) {
                    -webkit-overflow-scrolling: auto;
                }
                `
            ];
        }

        function createStyleElements(styles: string[]): HTMLStyleElement[] {
            const styleElements: HTMLStyleElement[] = [];

            for (const style of styles) {
                const styleElement = document.createElement("style");
                styleElement.appendChild(document.createTextNode(style));
                styleElements.push(styleElement);
            }

            return styleElements;
        }

        function createFirstScreenElements() {
            const wrapper = document.createElement("div");
            wrapper.setAttribute("role", "dialog");
            wrapper.setAttribute("aria-labelledby", "pwa-take-picture-modal-label");
            const hiddenDialogLabel = document.createElement("h1");
            hiddenDialogLabel.id = "pwa-take-picture-modal-label";
            hiddenDialogLabel.classList.add("pwa-take-picture-screen-reader");
            hiddenDialogLabel.textContent = getUserText(
                "Take a picture using your device's camera",
                "Maak een foto met de camera van uw apparaat"
            );
            wrapper.classList.add("pwa-take-picture-wrapper");

            const video = document.createElement("video");
            video.classList.add("pwa-take-picture-video-element");
            video.setAttribute("autoplay", "");
            video.setAttribute("muted", "");
            video.setAttribute("playsinline", "");

            const controlsWrapper = document.createElement("div");

            const closeControlWrapper = document.createElement("div");
            closeControlWrapper.classList.add("pwa-take-picture-close-control-wrapper");

            const actionControl = document.createElement("button");
            const actionControlHiddenText = document.createElement("span");
            actionControlHiddenText.textContent = getUserText("Take picture", "Foto nemen");
            actionControlHiddenText.classList.add("pwa-take-picture-screen-reader");
            actionControl.appendChild(actionControlHiddenText);
            actionControl.classList.add("pwa-take-picture-action-control");

            const actionControlWrapper = document.createElement("div");
            actionControlWrapper.classList.add("pwa-take-picture-action-spacing");

            const switchControl = document.createElement("button");
            const switchControlHiddenText = document.createElement("span");
            switchControlHiddenText.textContent = getUserText("Switch camera", "Van camera wisselen");
            switchControlHiddenText.classList.add("pwa-take-picture-screen-reader");
            switchControl.appendChild(switchControlHiddenText);
            switchControl.classList.add("pwa-take-picture-switch-control");

            const switchControlWrapper = document.createElement("div");
            switchControlWrapper.classList.add("pwa-take-picture-switch-spacing");

            const closeControl = document.createElement("button");
            const closeControlHiddenText = document.createElement("span");
            closeControlHiddenText.classList.add("pwa-take-picture-screen-reader");
            closeControlHiddenText.textContent = getUserText("Close", "Afsluiten");
            closeControl.appendChild(closeControlHiddenText);
            closeControl.classList.add("pwa-take-picture-close-control");

            const closeImg = document.createElement("img");
            closeImg.src = `data:image/svg+xml;base64,${closeSVG}`;

            const switchImg = document.createElement("img");
            switchImg.src = `data:image/svg+xml;base64,${syncSVG}`;

            const takePictureImg = document.createElement("img");
            takePictureImg.src = `data:image/svg+xml;base64,${cameraButtonSVG}`;

            closeControl.appendChild(closeImg);
            switchControl.appendChild(switchImg);
            actionControl.appendChild(takePictureImg);

            function createActionAndSwitch() {
                const spacingDiv = document.createElement("div");
                spacingDiv.classList.add("pwa-take-picture-spacing-div");

                actionControlWrapper.appendChild(actionControl);
                switchControlWrapper.appendChild(switchControl);
                controlsWrapper.appendChild(spacingDiv);
                controlsWrapper.appendChild(actionControlWrapper);
                controlsWrapper.appendChild(switchControlWrapper);
            }

            function createAction() {
                controlsWrapper.appendChild(actionControl);
            }

            closeControlWrapper.appendChild(closeControl);
            wrapper.appendChild(controlsWrapper);
            wrapper.appendChild(closeControlWrapper);
            wrapper.appendChild(video);

            return {
                video,
                wrapper,
                controlsWrapper,
                actionControl,
                switchControl,
                closeControl,
                createActionAndSwitch,
                createAction
            };
        }

        function prepareSecondScreen() {
            let confirmationWrapper: HTMLDivElement;

            return {
                handler: () => {
                    if (videoIsReady) {
                        confirmationWrapper = document.createElement("div");
                        confirmationWrapper.classList.add("pwa-take-picture-confirm-wrapper");

                        const topSection = document.createElement("div");
                        topSection.classList.add("pwa-take-picture-confirm-top-section");

                        const middleSection = document.createElement("div");
                        middleSection.classList.add("pwa-take-picture-confirm-middle-section");

                        const bottomSection = document.createElement("div");
                        bottomSection.classList.add("pwa-take-picture-confirm-bottom-section");

                        const videoCanvas = document.createElement("canvas");
                        videoCanvas.classList.add("pwa-take-picture-image");
                        videoCanvas.height = video.videoHeight;
                        videoCanvas.width = video.videoWidth;
                        const videoContext = videoCanvas.getContext("2d");
                        videoContext?.drawImage(video, 0, 0);

                        const buttonWrapper = document.createElement("div");
                        buttonWrapper.classList.add("pwa-take-picture-button-wrapper");

                        const saveBtn = document.createElement("button");
                        saveBtn.classList.add("pwa-take-picture-save-button");
                        saveBtn.textContent = getUserText("Save", "Opslaan");

                        const closeBtn = document.createElement("button");
                        closeBtn.classList.add("pwa-take-picture-cancel-button");
                        closeBtn.textContent = getUserText("Close", "Afsluiten");

                        middleSection.appendChild(videoCanvas);
                        buttonWrapper.appendChild(saveBtn);
                        buttonWrapper.appendChild(closeBtn);
                        bottomSection.appendChild(buttonWrapper);
                        confirmationWrapper.appendChild(topSection);
                        confirmationWrapper.appendChild(middleSection);
                        confirmationWrapper.appendChild(bottomSection);

                        document.body.appendChild(confirmationWrapper);

                        saveBtn.addEventListener("click", saveFile);

                        closeBtn.addEventListener("click", cleanupConfirmationElements);

                        function cleanupConfirmationElements() {
                            updateSaveButtonDisabledState(false);
                            document.body.removeChild(confirmationWrapper);
                        }

                        async function saveFile() {
                            if (!saveButtonIsDisabled) {
                                updateSaveButtonDisabledState(true);
                                const filename = `device-camera-picture-${new Date()}`;

                                new Promise((resolve, reject) => {
                                    videoCanvas.toBlob(blob => {
                                        if (blob) resolve(blob);
                                        else
                                            reject(
                                                new Error(
                                                    getUserText(
                                                        "Couldn't save picture, please try again.",
                                                        "Kan foto niet opslaan. Probeer het opnieuw."
                                                    )
                                                )
                                            );
                                    });
                                })
                                    .then((blob: Blob) => {
                                        mx.data.saveDocument(
                                            picture.getGuid(),
                                            filename,
                                            {},
                                            blob,
                                            () => {
                                                picture.set("Name", filename);

                                                mx.data.commit({
                                                    mxobj: picture,
                                                    callback: cleanupConfirmationElements,
                                                    error: (error: Error) => {
                                                        updateSaveButtonDisabledState(false);
                                                        // show a error modal and allow the user to retry.
                                                        mx.onError(
                                                            new Error(
                                                                getUserText(
                                                                    `An error occurred while trying to save the file${
                                                                        error.message ? `: ${error.message}` : ""
                                                                    }. Please try again.`,
                                                                    `Er is een fout opgetreden bij het opslaan van het bestand${
                                                                        error.message ? `: ${error.message}` : ""
                                                                    }. Probeer het opnieuw.`
                                                                )
                                                            )
                                                        );
                                                    }
                                                });
                                            },
                                            (error: Error) => {
                                                updateSaveButtonDisabledState(false);
                                                // show a error modal and allow the user to retry.
                                                mx.onError(
                                                    new Error(
                                                        getUserText(
                                                            `An error occurred while trying to save the file${
                                                                error.message ? `: ${error.message}` : ""
                                                            }. Please try again.`,
                                                            `Er is een fout opgetreden bij het opslaan van het bestand${
                                                                error.message ? `: ${error.message}` : ""
                                                            }. Probeer het opnieuw.`
                                                        )
                                                    )
                                                );
                                            }
                                        );
                                    })
                                    .catch((error: Error) => {
                                        updateSaveButtonDisabledState(false);

                                        mx.onError(error);
                                    });
                            }
                        }

                        function updateSaveButtonDisabledState(isDisabled: boolean): void {
                            saveButtonIsDisabled = isDisabled;
                            saveBtn.disabled = isDisabled;
                            if (isDisabled) {
                                saveBtn.classList.add("pwa-take-picture-disabled");
                            } else {
                                saveBtn.classList.remove("pwa-take-picture-disabled");
                            }
                        }
                    }
                },
                cleanup: () => {
                    try {
                        document.body.removeChild(confirmationWrapper);
                    } catch (e) {
                        // silently handle case where node already removed.
                    }
                }
            };
        }

        async function switchControlHandler() {
            if (!stream) return;

            stopCamera();

            if (hasMultipleCameraDevices) {
                shouldFaceEnvironment = !shouldFaceEnvironment;
            }

            await startCamera(shouldFaceEnvironment ? "environment" : "user");
        }

        function closeControlHandler() {
            stopCamera();

            document.body.removeChild(wrapper);

            for (const styleElement of styleElements) {
                document.head.removeChild(styleElement);
            }
        }

        async function startCamera(facingMode: string) {
            try {
                stream = await navigator.mediaDevices.getUserMedia({ video: { facingMode: facingMode } });

                stream?.getTracks()?.forEach(track => {
                    track.addEventListener("ended", () => {
                        closeControlHandler();
                        reject(
                            new Error(
                                getUserText("Video stream unexpectedly ended.", "Videostream is onverwachts beëindigd.")
                            )
                        );
                    });
                });
            } catch (e) {
                if (e instanceof Error) {
                    switch (e.name) {
                        case "NotAllowedError":
                            error = getUserText("Permission denied.", "Geen toestemming.");
                            break;
                        case "NotFoundError":
                            error = getUserText("Media not available.", "Media niet beschikbaar.");
                            break;
                        case "NotReadableError":
                            error = getUserText(
                                "Media not available, is it already in use elsewhere?",
                                "Media niet beschikbaar, wordt deze al ergens anders gebruikt?"
                            );
                            break;
                        default:
                            error = e.message;
                            break;
                    }
                }
            }

            if (error) {
                closeControlHandler();

                return reject(new Error(error));
            }

            if (stream) {
                video.srcObject = stream;
            }
        }

        function stopCamera() {
            videoIsReady = false;

            const tracks = stream?.getTracks();

            tracks?.forEach(track => {
                track.stop();
            });

            stream = undefined;
        }
    });

    function prepareLanguage(): (english: string, dutch: string) => string {
        const englishFn = (english: string, _dutch: string) => english;

        try {
            return mx.session.sessionData.locale.code.toLowerCase().includes("en")
                ? englishFn
                : (_english: string, dutch: string) => dutch;
        } catch (_) {
            return englishFn;
        }
    }
    // END USER CODE
}
