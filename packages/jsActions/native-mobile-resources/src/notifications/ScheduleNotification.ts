// This file was generated by Mendix Modeler.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the code between BEGIN USER CODE and END USER CODE
// Other code you write will be lost the next time you deploy the project.

import { NativeModules, Platform } from "react-native";
import PushNotification, { PushNotificationScheduleObject } from "react-native-push-notification";

/**
 * Displays the specified notification at a future moment in time.
 *
 * Note: It is not possible to display a notification whilst the app is in the foreground on iOS 9.
 * @param {Date} date - This field is required.
 * @param {string} body - This field is required.
 * @param {string} title
 * @param {string} subtitle
 * @param {boolean} playSound
 * @param {string} notificationId - This ID can be used to cancel the scheduled notification later.
 * @param {string} actionName
 * @param {string} actionGuid
 * @returns {Promise.<void>}
 */
export async function ScheduleNotification(
    date?: Date,
    body?: string,
    title?: string,
    subtitle?: string,
    playSound?: boolean,
    notificationId?: string,
    actionName?: string,
    actionGuid?: string
): Promise<void> {
    // BEGIN USER CODE
    // Documentation https://github.com/zo0r/react-native-push-notification

    const isIOS = Platform.OS === "ios";
    if (
        NativeModules &&
        ((isIOS && !NativeModules.RNCPushNotificationIOS) || (!isIOS && !NativeModules.RNPushNotification))
    ) {
        return Promise.reject(new Error("Notifications module is not available in your app"));
    }
    // eslint-disable-next-line @typescript-eslint/no-var-requires
    const RNPushNotification: typeof PushNotification = require("react-native-push-notification");

    if (!body) {
        return Promise.reject(new Error("Input parameter 'Body' is required"));
    }

    const notification = { message: body } as PushNotificationScheduleObject;

    if (!isIOS) {
        notification.channelId = "mendix-local-notifications";
    }

    if (notificationId && Number(notificationId)) {
        notification.id = Number(notificationId);
    }

    if (title) {
        notification.title = title;
    }

    if (subtitle && !isIOS) {
        notification.subText = subtitle;
    }

    notification.playSound = !!playSound;

    if (actionName || actionGuid) {
        notification.userInfo = {
            actionName,
            guid: actionGuid
        };
    }

    if (date && date.getTime()) {
        notification.date = date;
    }

    RNPushNotification.localNotificationSchedule(notification);
    return Promise.resolve();
    // END USER CODE
}
