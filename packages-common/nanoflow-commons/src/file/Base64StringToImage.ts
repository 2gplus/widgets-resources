// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.

// BEGIN EXTRA CODE
function base64toBlob(b64Data: string, contentType = "", sliceSize = 512): Blob {
    const byteCharacters = atob(b64Data);
    const byteArrays = [];

    for (let offset = 0; offset < byteCharacters.length; offset += sliceSize) {
        const slice = byteCharacters.slice(offset, offset + sliceSize);
        const byteNumbers = new Array(slice.length);
        for (let i = 0; i < slice.length; i++) {
            byteNumbers[i] = slice.charCodeAt(i);
        }
        const byteArray = new Uint8Array(byteNumbers);
        byteArrays.push(byteArray);
    }

    return new Blob(byteArrays, { type: contentType });
}
// END EXTRA CODE

/**
 * @param {string} base64string
 * @param {MxObject} imageDocument
 * @returns {Promise.<void>}
 */
export async function Base64StringToImage(base64string: string, imageDocument: mendix.lib.MxObject): Promise<void> {
    // BEGIN USER CODE
    const blob = base64toBlob(base64string);
    // TODO make it Native, implement error cases
    // file extension, change, handle previx data:image/png;base64,

    return new Promise((resolve, reject) => {
        mx.data.saveDocument(imageDocument.getGuid(), imageDocument.get("Name") as string, {}, blob, resolve, error => {
            reject(new Error("Failed to store file into image: " + error.message));
        });
    });
    // END USER CODE
}
